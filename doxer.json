[
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "Object"
        ],
        "name": "options",
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Process all files</p>",
      "summary": "<p>Process all files</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "exports.process = function (options, callback) {\n  if (options.files.indexOf('*') !== -1) {\n    \n  }\n  \n  options.files.forEach(generate);\n  \n  html = ejs.render(template, {\n    title: options.title,\n    sections: sections\n  });\n  \n   If we have a callback, lets return html and style in a object \n  if (typeof callback === 'function') {\n    callback({ html: html, style: style });\n  } else {\n    exec('mkdir -p docs', function () {\n      fs.writeFile('docs/doxer.html', html);\n      fs.writeFile('docs/doxer.css', style);\n    });\n  }\n}",
    "ctx": {
      "type": "method",
      "receiver": "exports",
      "name": "process",
      "string": "exports.process()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "file",
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Generate documentation html and code html for file</p>",
      "summary": "<p>Generate documentation html and code html for file</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "function generate (file) {\n  var fileSrc = fs.readFileSync(file, 'utf8').toString()\n    , parsed = dox.parseComments(fileSrc, { raw: false })\n    , topComment = /(\\/\\*\\!(.|\\n)+?\\*\\/)/.exec(fileSrc);\n    \n  if (topComment !== null && topComment[1]) {\n    sections.push({\n      docs_html: '<pre><code>' + topComment[1] + '</code></pre>',\n      code_html: readUntilDox(fileSrc, topComment[1])\n    });\n  } else {\n    var lines = fileSrc.split('\\n');\n    topComment = '';\n    for (var i = 0; i < lines.length; i++) {\n      if (/\\/\\/.*$/m.test(lines[i])) {\n        topComment += lines[i] + '\\n';\n      } else {\n         Maybe it's a new line between project name comment and copyright comment\n        if (/\\/\\/.*$/m.test(lines[i + 1])) continue;\n        break;\n      }\n    }\n    \n    sections.push({\n      docs_html: '<pre><code>' + topComment + '</code></pre>',\n      code_html: readUntilDox(fileSrc, topComment)\n    });\n  }\n    \n  parsed.map(function (doc) {\n    if (doc.ignore || doc.isPrivate) return;\n        \n    sections.push({\n      docs_html: doc.description.full,\n      code_html: hl(doc.code)\n    });\n  });\n}",
    "ctx": {
      "type": "function",
      "name": "generate",
      "string": "generate()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "src",
        "description": ""
      },
      {
        "type": "param",
        "types": [
          "String"
        ],
        "name": "topComment",
        "description": ""
      },
      {
        "type": "return",
        "types": [
          "String"
        ],
        "description": ""
      }
    ],
    "description": {
      "full": "<p>Read until dox syntax starts.</p>",
      "summary": "<p>Read until dox syntax starts.</p>",
      "body": ""
    },
    "isPrivate": false,
    "ignore": false,
    "code": "') !== -1) {\n      break;\n    } else {\n      res += lines[i] + '\\n';\n    }\n  }\n  \n  res = res.replace(topComment, '');\n  \n  return hl(res);\n}"
  }
]